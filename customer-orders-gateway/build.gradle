plugins {
    id 'org.springframework.boot' version '2.7.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
    id "org.sonarqube" version "3.4.0.2513"
}

group = 'ru.vald3r'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2021.0.3")
    set('testcontainersVersion', "1.17.2")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    implementation 'org.springdoc:springdoc-openapi-webflux-ui:1.6.9'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    runtimeOnly 'io.netty:netty-resolver-dns-native-macos:4.1.77.Final:osx-aarch_64'
    testImplementation 'com.squareup.okhttp3:okhttp:4.10.0'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.10.0'
}

dependencyManagement {
    imports {
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
tasks.register("prepareKotlinBuildScriptModel") {}
tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "ru/vald3r/**/model/*",
                    "ru/vald3r/**/*Dto.*",
                    "**/config/*"
            ])
        }))
    }
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

jacoco {
    toolVersion = "0.8.8"
}

sonarqube {
    properties {
        property "sonar.projectKey", "vald3r_reactive-gateway_customer-orders-gateway"
        property "sonar.organization", "vald3r"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}